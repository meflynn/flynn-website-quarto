{
  "hash": "c1e4d758e2b264e8ea7d438a2bfce5ba",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Better Organizing Plots with ggplot and patchwork\"\n\nauthor: Michael Flynn\ndate: \"2024-08-07\"\ndescription: \"A short guide on how to effectively use real estate with information-dense plots.\"\ncategories:\n  - blogging\n  - data analysis\n  - data science\n  - dataviz\n  - data visualization\n  - statistics\ntags:\n  - blogging\n  - dataviz\n  - data visualization\n  - stats\n  - regex\n  - data analysis\nword-count:\nreading-time:\nformat:\n  html:\n    code-overflow: wrap\nexecution:\n  warning: false\n  message: false\n  eval: false\n---\n\n\n:::{.callout-tip}\n\nWho's this for? This is a short guide with a couple of useful tips for better utilizing your plot real estate with ggplot when you've got a lot going on. This is for anyone who wants to make their plots more informative and visually appealing when dealing with lots of information, labels, titles, etc.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|echo: false\n#|message: false\n#|include: false\n#|warning: false\n#|error: false\n\n# Load libraries and data\n# Do some basic cleaning to get the variables ready for plotting\n\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(patchwork)\n\ndata <- readr::read_csv(here::here(\"posts/20240807-ggplot-spacing/poland-survey.csv\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 2254 Columns: 106\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (79): Status, ResponseId, DistributionChannel, UserLanguage, Q56, gender...\ndbl (11): StartDate, EndDate, Progress, Duration (in seconds), RecordedDate,...\nlgl (16): Finished, rnid, study, PID, K2, RISN, rid, Q_BallotBoxStuffing, Q_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\ndata.contact.type <- data |>\n      dplyr::select(contact_pers_type) |>\n      tidyr::separate_longer_delim(contact_pers_type,\n                                   delim = stringr::regex(\"\\\\.\\\\,|\\\\,(?=[A-Z])\")) |>  # This regex identifies a comma followed by a period, or a comma immediately followed by a capital letter, but uses the lookahead question mark thing to ignore the capital letter so it doesn't include it as a delimiter.\n      dplyr::mutate(contact_pers_type = trimws(contact_pers_type),\n                    contact_pers_type = gsub(\"\\\\b$\", \"\\\\.\", contact_pers_type),\n                    contact_pers_type = gsub(\"\\\\.\\\\.\", \"\\\\.\", contact_pers_type)) |>\n      dplyr::group_by(contact_pers_type) |>\n      dplyr::summarise(total = n()) |>\n      filter(!is.na(contact_pers_type))\n```\n:::\n\n\nThis is a short post inspired by some recent work I did on a project. The primary goal is to show ggplot users a couple of tricks that they can use to make better use of the visual space in their plots when they have a lot of information to display. This is especially useful when you have multiple plots that you want to display together, and you want to make sure that they are visually appealing and informative. It can also be helpful when you're trying to display lots of information in axis labels. I'll be using the `ggplot2` package in R for this post, but the principles should be applicable to other plotting libraries as well. \n\nThis is a pretty short example but I'll try to walk through my process. Readers who want to take a deeper dive into this topic might want to check our Kieran Healy's excellent book on data visualization, [Data Visualization: A Practical Introduction](https://socviz.co/).\n\n## The Problem\n\nWhen you're working with ggplot, you often have a lot of information that you want to display in your plots. This can include things like titles, axis labels, legends, and other annotations. However, if you're not careful, all of this information can quickly clutter up your plot and make it difficult to read and interpret. This is especially true when you're trying to display multiple plots together, as you might in a grid or faceted plot.\n\nOne thing to note is that I have a personal bias towards wanting to display information with figures where possible. Tables can be great, but I think it's often easier to process lots of information—particularly when we're comparing across categories—when we're dealing with visual representations of that information. So I'm always looking for ways to make my plots as informative as possible without sacrificing readability.\n\n## Example\n\nOn a recent project we were attempting to show a couple of different related points of information. Without going into too much unnecessary detail, we wanted to show information from a survey that we fielded on individual attitudes towards US military personnel stationed in their country. Specifically, we wanted to show 1) the number of people who reported having personal contact with US service personnel, and 2) the nature of the contact for those individuals who reported it. Ultimately we wanted to show the categories and the count of individuals who responded for each category. \n\n### Example 1\n\nHere's a bare bones example of what we're looking for.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- ggplot(data, aes(y = contact_pers, x = after_stat(count/sum(count)))) +\n  geom_bar() +\n  labs(x = \"Percent of Respondents\",\n       y = \"Contact with US Service Personnel\")\n\np2 <- ggplot(data = data.contact.type, aes(y = reorder(contact_pers_type, total), x = total)) +\n  geom_bar(stat = \"identity\")  +\n  labs(x = \"Number of Respondents\",\n       y = \"Type of Contact\")\n\npatchwork::wrap_plots(p1, p2, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](20240807-ggplot-spacing_files/figure-html/fig-baseexample-1.png){#fig-baseexample width=672}\n:::\n:::\n\nSome obvious problems with @fig-baseexample. The proportions are way off, largely due to the fact that the reported contact types are long character strings. This forces the plot on the right to take up waaaaaaay more space then it should, crowding out all the other information. We can't even see the bars or numbers, which are kind of important. \n\nThis is a bit of a straw man as it uses a completely bare bones `ggplot` without any modifications, but it helps to highlight some of the problems that we're dealing with. There are a few basic things we can do to clean this up and make it more informative.\n\n### Example 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- ggplot(data, aes(y = contact_pers, x = after_stat(count/sum(count)))) +\n  geom_bar() +\n  labs(x = \"Percent of Respondents\",\n       y = \"Contact with US Service Personnel\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\np2 <- ggplot(data = data.contact.type, aes(y = reorder(contact_pers_type, total), x = total)) +\n  geom_bar(stat = \"identity\")  +\n  labs(x = \"Number of Respondents\",\n       y = \"Type of Contact\") +\n  theme_minimal() +\n  scale_y_discrete(labels = function(x) str_wrap(x, width = 55))\n\npatchwork::wrap_plots(p1, p2, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](20240807-ggplot-spacing_files/figure-html/fig-example2-1.png){#fig-example2 width=672}\n:::\n:::\n\n\n@fig-example2 is a little bit better. We can see the actual axis values and bars, which are carrying almost all of the information that we care about. The big improvement here comes from the `scale_y_discrete(labels = function(x) str_wrap(x, width = 55))` line of code in the right plot. The `str_wrap()` function allows ggplot to wrap the character strings across multiple lines, which makes them much easier to read and produces far less distortion in the plot. You can manipulate the `width` argument to get the desired number of characters per line and tweak the spacing.\n\nBut we can still do better. For example, in the left panel we can see the bars are disproportionately sized compared to the bars in the right panel. This isn't surprising as we have very few categories in the left plot and several in the right, but we're stretching them out across the same vertical space. It's not terrible, but the distortion is notable and distracting. The ordering of these values also isn't great. We could order them so their in descending frequency, like we do in the right panel. Last, presenting the x axis values as percentage values rather than proportions will better match the count values in the right panel.\n\nWe can also see that the category character strings in the right panel are extremely difficult to read. They're not right justified, and they run across multiple lines. Finding specific starting points can be tough, and sometimes one category kind of runs into the next, making it hard to match specific categories with their corresponding bars and counts.  \n\n\n\n### Example 3\n\nLet's take another pass and try to iron out some of these issues. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set custom color for bars\nbarcolor <- viridis::turbo(1, begin = 0.10)\n\np1 <- ggplot(data = data,\n         aes(y = contact_pers,\n             x = after_stat(count/sum(count)))) +\n  geom_bar(fill = barcolor) +\n  theme_minimal() +\n  scale_x_continuous(labels = scales::percent_format(),\n                     limits = c(0, 1),\n                     expand = c(0, 0.01)) +\n  labs(x = \"Percent\",\n       y = \"Reported Contact\") \n\np2 <- ggplot(data = data.contact.type,\n           aes(y = reorder(contact_pers_type, total),\n               x = total)) +\n  geom_bar(fill = barcolor,\n               stat = \"identity\") +\n  scale_x_continuous(expand = c(0, 1)) +\n      scale_y_discrete(labels = function(x) str_wrap(x, width = 55)) +\n  labs(x = \"Count\",\n           y = \"Contact Type\") +\n  theme_minimal() +\n  theme(axis.text.y.left = element_text(size = 10.0,\n                                        hjust = 0,\n                                        vjust = 0,\n                                        margin = margin(r = -5.0, b = 0.5, unit = \"cm\")),\n          axis.ticks.length.y.left = unit(5.5, \"cm\"),\n          axis.ticks.y.left = element_line(linetype = \"dotted\",\n                                           linewidth = 0.3))\n\npatchwork::wrap_plots(p1, p2, ncol = 1)\n```\n\n::: {.cell-output-display}\n![](20240807-ggplot-spacing_files/figure-html/fig-example3-1.png){#fig-example3 width=672}\n:::\n:::\n\n\n@fig-example3 fixes some big problems with the previous plots, but also creates some new ones. Stacking the figures on top of one another fixes the problems with the distorted column sizes and the difficulty in reading the category labels. It looks a little better now.\n\nFirst, we moved from two columns to a single column, placing the plots on top of one another. This produces less compression in the bars helps us to better compare the relative size/magnitude of the x axis values within each plot.\n\nWe can also see in the bottom panel that the respondent categories are left justified, which makes it easier to read the categories and match them to bars. To make it even easier to match categories to particular bars/counts we've added a dotted line that runs the length of the y-axis. We do this using the `theme()` function and the `axis.ticks.y.left` and `axis.ticks.length.y.left` arguments. This takes some tweaking to get right, and depends on the settings in the `str_wrap()` arguments in the `scale_y_discrete()` function. It will also depend on the overall dimensions of the figure. \n\nBut we can see the bottom panel is now even more crowded. The dotted lines are great, but they don't help when the text is spilling over from one category to the next. \n\n### Example 4\n\nOK, let's take one more pass and iron out some of the details. This last step also requires that we revisit some of the data cleaning processes that produce the data we use in each plot. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.contact.type <- data |>\n      dplyr::select(contact_pers_type) |>\n      tidyr::separate_longer_delim(contact_pers_type,\n                                   delim = stringr::regex(\"\\\\.\\\\,|\\\\,(?=[A-Z])\")) |>  # This regex identifies a comma followed by a period, or a comma immediately followed by a capital letter, but uses the lookahead question mark thing to ignore the capital letter so it doesn't include it as a delimiter.\n      dplyr::mutate(contact_pers_type = trimws(contact_pers_type),\n                    contact_pers_type = gsub(\"\\\\b$\", \"\\\\.\", contact_pers_type),\n                    contact_pers_type = gsub(\"\\\\.\\\\.\", \"\\\\.\", contact_pers_type),\n                    contact_pers_type = gsub(\"^\", \"\\u2022 \", contact_pers_type)) |>\n      dplyr::group_by(contact_pers_type) |>\n      dplyr::summarise(total = n()) |>\n      filter(!is.na(contact_pers_type))\n\n\n# set custom color for bars\nbarcolor <- viridis::turbo(1, begin = 0.10)\n\np1 <- ggplot(data = data,\n         aes(y = contact_pers,\n             x = after_stat(count/sum(count)))) +\n  geom_bar(fill = barcolor) +\n  theme_minimal() +\n  scale_x_continuous(labels = scales::percent_format(),\n                     limits = c(0, 1),\n                     expand = c(0, 0.01)) +\n  labs(x = \"Percent\",\n       y = \"Reported Contact\") \n\np2 <- ggplot(data = data.contact.type,\n           aes(y = reorder(contact_pers_type, total),\n               x = total)) +\n  geom_bar(fill = barcolor,\n               stat = \"identity\") +\n  scale_x_continuous(expand = c(0, 1)) +\n      scale_y_discrete(labels = function(x) str_wrap(x, width = 55, exdent = 3)) +\n  labs(x = \"Count\",\n           y = \"Contact Type\") +\n  theme_minimal() +\n  theme(axis.text.y.left = element_text(size = 9.0,\n                                        hjust = 0,\n                                        vjust = 0,\n                                        margin = margin(r = -5.0, b = 0.5, unit = \"cm\")),\n          axis.ticks.length.y.left = unit(5.5, \"cm\"),\n          axis.ticks.y.left = element_line(linetype = \"dotted\",\n                                           linewidth = 0.3))\n\npatchwork::wrap_plots(p1, p2, ncol = 1) +\n  patchwork::plot_layout(ncol = 1,\n                         heights = c(1,3)) +\n  plot_annotation(tag_levels = 'A') &\n  theme(text = element_text(family = \"Oswald\", size = 10))\n```\n\n::: {.cell-output-display}\n![](20240807-ggplot-spacing_files/figure-html/fig-example4-1.png){#fig-example4 width=576}\n:::\n:::\n\n\nWay better! So what did we do here?\n\nFirst, we added a bullet point to the beginning of each category in the contact type data. We did this with the simple `gsub()` function here: `contact_pers_type = gsub(\"^\", \"\\u2022 \", contact_pers_type)`. This just uses a mutate command to insert a bullet point into the beginning of each character string in the `contact_pers_type` category. This helps to visually separate the categories from one another and makes it easier to match the categories to the bars. \n\nNote that because the bullet point adds a new character and a blank space, we also want to make sure that the `str_wrap()` argument is aligning the new lines with the first line so the bullet point actually leads the rest of the text. That is, we don't want the line break to start a new line flush with the bullet point because this would reduce the bullet point's use in distinguishing new lines. We do this with the `exdent` argument in the `str_wrap()` function. Again, play with values here to find what works for your plot. \n\nWe also increased the overall vertical spacing of the plot. We did this here with Quarto's `fig-height` and `fig-width` arguments, but you could also do this by adjusting the size of the plot in the `ggsave()` function when you save the plot to include in another document. But adding vertical space helps to eliminate the overlap in the text for the contact type categories. \n\nLast, we used the `patchwork` package to adjust the proportions of the individual plots. In this case we set the heights of the plots to 1 and 3, respectively. This gives the bottom plot more vertical space, which helps to eliminate the overlap in the text, and also brings the heights of the top panel's bars even more into line with the bar heights in the bottom plot. We also added subplot labels to distinguish more easily between panels \"A\" and \"B\". \n\n\n## Other Options?\n\nThis assumes we want to do all of the work in ggplot, but there are other options for accomplishing similar goals. For example, we could use the `gt` and `geExtras` packages to do something similar with sparkline plots. This can be be great in certain circumstances, but I think it would be a bit more difficult to get the same level of control over the plot aesthetics since we're dealing with two plots and two different axis scales. \n\nBut here's an example of how you might do this with `gt` and `gtExtras`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|warning: false\n#|message: false\n\nlibrary(gt)\nlibrary(gtExtras)\n\ndata.contact.type <- data |> \n  dplyr::select(contact_pers_type) |> \n  tidyr::separate_longer_delim(contact_pers_type,\n                               delim = stringr::regex(\"\\\\.\\\\,|\\\\,(?=[A-Z])\")) |> \n  dplyr::mutate(contact_pers_type = trimws(contact_pers_type),\n                contact_pers_type = gsub(\"\\\\b$\", \"\\\\.\", contact_pers_type),\n                contact_pers_type = gsub(\"\\\\.\\\\.\", \"\\\\.\", contact_pers_type),\n                contact_pers_type = gsub(\"^\", \"\\u2022 \", contact_pers_type)) |> \n  dplyr::group_by(contact_pers_type) |> \n  dplyr::summarise(total = list(n())) |> \n  filter(!is.na(contact_pers_type))\n\ndata.contact.type |> \n  dplyr::rename(\"Contact Type\" = contact_pers_type,\n                \"Count\" = total) |>\n  gt() |> \n  gt_plt_bar(\n    column = Count) \n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"thnebofbwj\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#thnebofbwj table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#thnebofbwj thead, #thnebofbwj tbody, #thnebofbwj tfoot, #thnebofbwj tr, #thnebofbwj td, #thnebofbwj th {\n  border-style: none;\n}\n\n#thnebofbwj p {\n  margin: 0;\n  padding: 0;\n}\n\n#thnebofbwj .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#thnebofbwj .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#thnebofbwj .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#thnebofbwj .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#thnebofbwj .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#thnebofbwj .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#thnebofbwj .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#thnebofbwj .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#thnebofbwj .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#thnebofbwj .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#thnebofbwj .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#thnebofbwj .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#thnebofbwj .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#thnebofbwj .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#thnebofbwj .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#thnebofbwj .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#thnebofbwj .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#thnebofbwj .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#thnebofbwj .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#thnebofbwj .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#thnebofbwj .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#thnebofbwj .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#thnebofbwj .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#thnebofbwj .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#thnebofbwj .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#thnebofbwj .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#thnebofbwj .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#thnebofbwj .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#thnebofbwj .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#thnebofbwj .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#thnebofbwj .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#thnebofbwj .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#thnebofbwj .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#thnebofbwj .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#thnebofbwj .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#thnebofbwj .gt_left {\n  text-align: left;\n}\n\n#thnebofbwj .gt_center {\n  text-align: center;\n}\n\n#thnebofbwj .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#thnebofbwj .gt_font_normal {\n  font-weight: normal;\n}\n\n#thnebofbwj .gt_font_bold {\n  font-weight: bold;\n}\n\n#thnebofbwj .gt_font_italic {\n  font-style: italic;\n}\n\n#thnebofbwj .gt_super {\n  font-size: 65%;\n}\n\n#thnebofbwj .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#thnebofbwj .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#thnebofbwj .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#thnebofbwj .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#thnebofbwj .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#thnebofbwj .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#thnebofbwj .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#thnebofbwj .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#thnebofbwj div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Contact Type\">Contact Type</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Count\">Count</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"Contact Type\" class=\"gt_row gt_left\">• Been close friends with a U.S. service member.</td>\n<td headers=\"Count\" class=\"gt_row gt_left\"><?xml version='1.0' encoding='UTF-8' ?><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' width='113.39pt' height='14.17pt' viewBox='0 0 113.39 14.17'><defs>  <style type='text/css'><![CDATA[    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {      fill: none;      stroke: #000000;      stroke-linecap: round;      stroke-linejoin: round;      stroke-miterlimit: 10.00;    }    .svglite text {      white-space: pre;    }  ]]></style></defs><rect width='100%' height='100%' style='stroke: none; fill: none;'/><defs>  <clipPath id='cpMC4wMHwxMTMuMzl8MC4wMHwxNC4xNw=='>    <rect x='0.00' y='0.00' width='113.39' height='14.17' />  </clipPath></defs><g clip-path='url(#cpMC4wMHwxMTMuMzl8MC4wMHwxNC4xNw==)'><rect x='5.02' y='0.89' width='9.71' height='12.40' style='stroke-width: 1.07; stroke: none; stroke-linecap: butt; stroke-linejoin: miter; fill: #A020F0;' /><line x1='5.02' y1='14.17' x2='5.02' y2='0.0000000000000018' style='stroke-width: 1.07; stroke-linecap: butt;' /></g></svg></td></tr>\n    <tr><td headers=\"Contact Type\" class=\"gt_row gt_left\">• Dated/were romantically involved with a U.S. service member.</td>\n<td headers=\"Count\" class=\"gt_row gt_left\"><?xml version='1.0' encoding='UTF-8' ?><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' width='113.39pt' height='14.17pt' viewBox='0 0 113.39 14.17'><defs>  <style type='text/css'><![CDATA[    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {      fill: none;      stroke: #000000;      stroke-linecap: round;      stroke-linejoin: round;      stroke-miterlimit: 10.00;    }    .svglite text {      white-space: pre;    }  ]]></style></defs><rect width='100%' height='100%' style='stroke: none; fill: none;'/><defs>  <clipPath id='cpMC4wMHwxMTMuMzl8MC4wMHwxNC4xNw=='>    <rect x='0.00' y='0.00' width='113.39' height='14.17' />  </clipPath></defs><g clip-path='url(#cpMC4wMHwxMTMuMzl8MC4wMHwxNC4xNw==)'><rect x='5.02' y='0.89' width='10.36' height='12.40' style='stroke-width: 1.07; stroke: none; stroke-linecap: butt; stroke-linejoin: miter; fill: #A020F0;' /><line x1='5.02' y1='14.17' x2='5.02' y2='0.0000000000000018' style='stroke-width: 1.07; stroke-linecap: butt;' /></g></svg></td></tr>\n    <tr><td headers=\"Contact Type\" class=\"gt_row gt_left\">• Did business with a U.S. service member, such as selling them something or buying something from them.</td>\n<td headers=\"Count\" class=\"gt_row gt_left\"><?xml version='1.0' encoding='UTF-8' ?><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' width='113.39pt' height='14.17pt' viewBox='0 0 113.39 14.17'><defs>  <style type='text/css'><![CDATA[    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {      fill: none;      stroke: #000000;      stroke-linecap: round;      stroke-linejoin: round;      stroke-miterlimit: 10.00;    }    .svglite text {      white-space: pre;    }  ]]></style></defs><rect width='100%' height='100%' style='stroke: none; fill: none;'/><defs>  <clipPath id='cpMC4wMHwxMTMuMzl8MC4wMHwxNC4xNw=='>    <rect x='0.00' y='0.00' width='113.39' height='14.17' />  </clipPath></defs><g clip-path='url(#cpMC4wMHwxMTMuMzl8MC4wMHwxNC4xNw==)'><rect x='5.02' y='0.89' width='18.77' height='12.40' style='stroke-width: 1.07; stroke: none; stroke-linecap: butt; stroke-linejoin: miter; fill: #A020F0;' /><line x1='5.02' y1='14.17' x2='5.02' y2='0.0000000000000018' style='stroke-width: 1.07; stroke-linecap: butt;' /></g></svg></td></tr>\n    <tr><td headers=\"Contact Type\" class=\"gt_row gt_left\">• Don't know/decline to answer.</td>\n<td headers=\"Count\" class=\"gt_row gt_left\"><?xml version='1.0' encoding='UTF-8' ?><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' width='113.39pt' height='14.17pt' viewBox='0 0 113.39 14.17'><defs>  <style type='text/css'><![CDATA[    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {      fill: none;      stroke: #000000;      stroke-linecap: round;      stroke-linejoin: round;      stroke-miterlimit: 10.00;    }    .svglite text {      white-space: pre;    }  ]]></style></defs><rect width='100%' height='100%' style='stroke: none; fill: none;'/><defs>  <clipPath id='cpMC4wMHwxMTMuMzl8MC4wMHwxNC4xNw=='>    <rect x='0.00' y='0.00' width='113.39' height='14.17' />  </clipPath></defs><g clip-path='url(#cpMC4wMHwxMTMuMzl8MC4wMHwxNC4xNw==)'><rect x='5.02' y='0.89' width='1.94' height='12.40' style='stroke-width: 1.07; stroke: none; stroke-linecap: butt; stroke-linejoin: miter; fill: #A020F0;' /><line x1='5.02' y1='14.17' x2='5.02' y2='0.0000000000000018' style='stroke-width: 1.07; stroke-linecap: butt;' /></g></svg></td></tr>\n    <tr><td headers=\"Contact Type\" class=\"gt_row gt_left\">• Had a U.S. service member as a family member (other than a spouse).</td>\n<td headers=\"Count\" class=\"gt_row gt_left\"><?xml version='1.0' encoding='UTF-8' ?><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' width='113.39pt' height='14.17pt' viewBox='0 0 113.39 14.17'><defs>  <style type='text/css'><![CDATA[    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {      fill: none;      stroke: #000000;      stroke-linecap: round;      stroke-linejoin: round;      stroke-miterlimit: 10.00;    }    .svglite text {      white-space: pre;    }  ]]></style></defs><rect width='100%' height='100%' style='stroke: none; fill: none;'/><defs>  <clipPath id='cpMC4wMHwxMTMuMzl8MC4wMHwxNC4xNw=='>    <rect x='0.00' y='0.00' width='113.39' height='14.17' />  </clipPath></defs><g clip-path='url(#cpMC4wMHwxMTMuMzl8MC4wMHwxNC4xNw==)'><rect x='5.02' y='0.89' width='5.82' height='12.40' style='stroke-width: 1.07; stroke: none; stroke-linecap: butt; stroke-linejoin: miter; fill: #A020F0;' /><line x1='5.02' y1='14.17' x2='5.02' y2='0.0000000000000018' style='stroke-width: 1.07; stroke-linecap: butt;' /></g></svg></td></tr>\n    <tr><td headers=\"Contact Type\" class=\"gt_row gt_left\">• Had a U.S. service member as a spouse or domestic partner.</td>\n<td headers=\"Count\" class=\"gt_row gt_left\"><?xml version='1.0' encoding='UTF-8' ?><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' width='113.39pt' height='14.17pt' viewBox='0 0 113.39 14.17'><defs>  <style type='text/css'><![CDATA[    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {      fill: none;      stroke: #000000;      stroke-linecap: round;      stroke-linejoin: round;      stroke-miterlimit: 10.00;    }    .svglite text {      white-space: pre;    }  ]]></style></defs><rect width='100%' height='100%' style='stroke: none; fill: none;'/><defs>  <clipPath id='cpMC4wMHwxMTMuMzl8MC4wMHwxNC4xNw=='>    <rect x='0.00' y='0.00' width='113.39' height='14.17' />  </clipPath></defs><g clip-path='url(#cpMC4wMHwxMTMuMzl8MC4wMHwxNC4xNw==)'><rect x='5.02' y='0.89' width='3.88' height='12.40' style='stroke-width: 1.07; stroke: none; stroke-linecap: butt; stroke-linejoin: miter; fill: #A020F0;' /><line x1='5.02' y1='14.17' x2='5.02' y2='0.0000000000000018' style='stroke-width: 1.07; stroke-linecap: butt;' /></g></svg></td></tr>\n    <tr><td headers=\"Contact Type\" class=\"gt_row gt_left\">• Had a brief everyday interaction with a U.S. service member, such as conversing on public transport, or shopping at the same market.</td>\n<td headers=\"Count\" class=\"gt_row gt_left\"><?xml version='1.0' encoding='UTF-8' ?><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' width='113.39pt' height='14.17pt' viewBox='0 0 113.39 14.17'><defs>  <style type='text/css'><![CDATA[    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {      fill: none;      stroke: #000000;      stroke-linecap: round;      stroke-linejoin: round;      stroke-miterlimit: 10.00;    }    .svglite text {      white-space: pre;    }  ]]></style></defs><rect width='100%' height='100%' style='stroke: none; fill: none;'/><defs>  <clipPath id='cpMC4wMHwxMTMuMzl8MC4wMHwxNC4xNw=='>    <rect x='0.00' y='0.00' width='113.39' height='14.17' />  </clipPath></defs><g clip-path='url(#cpMC4wMHwxMTMuMzl8MC4wMHwxNC4xNw==)'><rect x='5.02' y='0.89' width='98.37' height='12.40' style='stroke-width: 1.07; stroke: none; stroke-linecap: butt; stroke-linejoin: miter; fill: #A020F0;' /><line x1='5.02' y1='14.17' x2='5.02' y2='0.0000000000000018' style='stroke-width: 1.07; stroke-linecap: butt;' /></g></svg></td></tr>\n    <tr><td headers=\"Contact Type\" class=\"gt_row gt_left\">• Had a co-worker who was a U.S. servicemember.</td>\n<td headers=\"Count\" class=\"gt_row gt_left\"><?xml version='1.0' encoding='UTF-8' ?><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' width='113.39pt' height='14.17pt' viewBox='0 0 113.39 14.17'><defs>  <style type='text/css'><![CDATA[    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {      fill: none;      stroke: #000000;      stroke-linecap: round;      stroke-linejoin: round;      stroke-miterlimit: 10.00;    }    .svglite text {      white-space: pre;    }  ]]></style></defs><rect width='100%' height='100%' style='stroke: none; fill: none;'/><defs>  <clipPath id='cpMC4wMHwxMTMuMzl8MC4wMHwxNC4xNw=='>    <rect x='0.00' y='0.00' width='113.39' height='14.17' />  </clipPath></defs><g clip-path='url(#cpMC4wMHwxMTMuMzl8MC4wMHwxNC4xNw==)'><rect x='5.02' y='0.89' width='9.71' height='12.40' style='stroke-width: 1.07; stroke: none; stroke-linecap: butt; stroke-linejoin: miter; fill: #A020F0;' /><line x1='5.02' y1='14.17' x2='5.02' y2='0.0000000000000018' style='stroke-width: 1.07; stroke-linecap: butt;' /></g></svg></td></tr>\n    <tr><td headers=\"Contact Type\" class=\"gt_row gt_left\">• Had a different interaction that does not fit into these categories (please list here).</td>\n<td headers=\"Count\" class=\"gt_row gt_left\"><?xml version='1.0' encoding='UTF-8' ?><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' width='113.39pt' height='14.17pt' viewBox='0 0 113.39 14.17'><defs>  <style type='text/css'><![CDATA[    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {      fill: none;      stroke: #000000;      stroke-linecap: round;      stroke-linejoin: round;      stroke-miterlimit: 10.00;    }    .svglite text {      white-space: pre;    }  ]]></style></defs><rect width='100%' height='100%' style='stroke: none; fill: none;'/><defs>  <clipPath id='cpMC4wMHwxMTMuMzl8MC4wMHwxNC4xNw=='>    <rect x='0.00' y='0.00' width='113.39' height='14.17' />  </clipPath></defs><g clip-path='url(#cpMC4wMHwxMTMuMzl8MC4wMHwxNC4xNw==)'><rect x='5.02' y='0.89' width='10.36' height='12.40' style='stroke-width: 1.07; stroke: none; stroke-linecap: butt; stroke-linejoin: miter; fill: #A020F0;' /><line x1='5.02' y1='14.17' x2='5.02' y2='0.0000000000000018' style='stroke-width: 1.07; stroke-linecap: butt;' /></g></svg></td></tr>\n    <tr><td headers=\"Contact Type\" class=\"gt_row gt_left\">• Had a neighbor who was a U.S. servicemember.</td>\n<td headers=\"Count\" class=\"gt_row gt_left\"><?xml version='1.0' encoding='UTF-8' ?><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' width='113.39pt' height='14.17pt' viewBox='0 0 113.39 14.17'><defs>  <style type='text/css'><![CDATA[    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {      fill: none;      stroke: #000000;      stroke-linecap: round;      stroke-linejoin: round;      stroke-miterlimit: 10.00;    }    .svglite text {      white-space: pre;    }  ]]></style></defs><rect width='100%' height='100%' style='stroke: none; fill: none;'/><defs>  <clipPath id='cpMC4wMHwxMTMuMzl8MC4wMHwxNC4xNw=='>    <rect x='0.00' y='0.00' width='113.39' height='14.17' />  </clipPath></defs><g clip-path='url(#cpMC4wMHwxMTMuMzl8MC4wMHwxNC4xNw==)'><rect x='5.02' y='0.89' width='9.71' height='12.40' style='stroke-width: 1.07; stroke: none; stroke-linecap: butt; stroke-linejoin: miter; fill: #A020F0;' /><line x1='5.02' y1='14.17' x2='5.02' y2='0.0000000000000018' style='stroke-width: 1.07; stroke-linecap: butt;' /></g></svg></td></tr>\n    <tr><td headers=\"Contact Type\" class=\"gt_row gt_left\">• Interacted with a U.S. service member in a recurring social setting, such as a house of worship, sports club, school, etc.</td>\n<td headers=\"Count\" class=\"gt_row gt_left\"><?xml version='1.0' encoding='UTF-8' ?><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' width='113.39pt' height='14.17pt' viewBox='0 0 113.39 14.17'><defs>  <style type='text/css'><![CDATA[    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {      fill: none;      stroke: #000000;      stroke-linecap: round;      stroke-linejoin: round;      stroke-miterlimit: 10.00;    }    .svglite text {      white-space: pre;    }  ]]></style></defs><rect width='100%' height='100%' style='stroke: none; fill: none;'/><defs>  <clipPath id='cpMC4wMHwxMTMuMzl8MC4wMHwxNC4xNw=='>    <rect x='0.00' y='0.00' width='113.39' height='14.17' />  </clipPath></defs><g clip-path='url(#cpMC4wMHwxMTMuMzl8MC4wMHwxNC4xNw==)'><rect x='5.02' y='0.89' width='15.53' height='12.40' style='stroke-width: 1.07; stroke: none; stroke-linecap: butt; stroke-linejoin: miter; fill: #A020F0;' /><line x1='5.02' y1='14.17' x2='5.02' y2='0.0000000000000018' style='stroke-width: 1.07; stroke-linecap: butt;' /></g></svg></td></tr>\n    <tr><td headers=\"Contact Type\" class=\"gt_row gt_left\">• Interacted with a U.S. service member in an individual social setting, such as a party, bar, festival, etc.</td>\n<td headers=\"Count\" class=\"gt_row gt_left\"><?xml version='1.0' encoding='UTF-8' ?><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='svglite' width='113.39pt' height='14.17pt' viewBox='0 0 113.39 14.17'><defs>  <style type='text/css'><![CDATA[    .svglite line, .svglite polyline, .svglite polygon, .svglite path, .svglite rect, .svglite circle {      fill: none;      stroke: #000000;      stroke-linecap: round;      stroke-linejoin: round;      stroke-miterlimit: 10.00;    }    .svglite text {      white-space: pre;    }  ]]></style></defs><rect width='100%' height='100%' style='stroke: none; fill: none;'/><defs>  <clipPath id='cpMC4wMHwxMTMuMzl8MC4wMHwxNC4xNw=='>    <rect x='0.00' y='0.00' width='113.39' height='14.17' />  </clipPath></defs><g clip-path='url(#cpMC4wMHwxMTMuMzl8MC4wMHwxNC4xNw==)'><rect x='5.02' y='0.89' width='39.48' height='12.40' style='stroke-width: 1.07; stroke: none; stroke-linecap: butt; stroke-linejoin: miter; fill: #A020F0;' /><line x1='5.02' y1='14.17' x2='5.02' y2='0.0000000000000018' style='stroke-width: 1.07; stroke-linecap: butt;' /></g></svg></td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::",
    "supporting": [
      "20240807-ggplot-spacing_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}